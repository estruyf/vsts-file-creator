"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfcommand_1 = require("../../lib/tfcommand");
var args = require("../../lib/arguments");
function getCommand(args) {
    return new BuildBase(args);
}
exports.getCommand = getCommand;
var BuildBase = /** @class */ (function (_super) {
    __extends(BuildBase, _super);
    function BuildBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Commands for managing Builds.";
        _this.serverCommand = false;
        return _this;
    }
    BuildBase.prototype.setCommandArgs = function () {
        _super.prototype.setCommandArgs.call(this);
        this.registerCommandArgument("definitionId", "Build Definition ID", "Identifies a build definition.", args.IntArgument, null);
        this.registerCommandArgument("definitionName", "Build Definition Name", "Name of a Build Definition.", args.StringArgument, null);
        this.registerCommandArgument("status", "Build Status", "Build status filter.", args.StringArgument, null);
        this.registerCommandArgument("top", "Number of builds", "Maximum number of builds to return.", args.IntArgument, null);
        this.registerCommandArgument("buildId", "Build ID", "Identifies a particular Build.", args.IntArgument);
    };
    BuildBase.prototype.exec = function (cmd) {
        return this.getHelp(cmd);
    };
    return BuildBase;
}(tfcommand_1.TfCommand));
exports.BuildBase = BuildBase;
//# sourceMappingURL=default.js.map