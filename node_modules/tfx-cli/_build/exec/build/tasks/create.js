"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var check = require("validator");
var fs = require("fs");
var path = require("path");
var shell = require("shelljs");
var tasksBase = require("./default");
var trace = require("../../../lib/trace");
var uuid = require("uuid");
function getCommand(args) {
    return new TaskCreate(args);
}
exports.getCommand = getCommand;
var TaskCreate = /** @class */ (function (_super) {
    __extends(TaskCreate, _super);
    function TaskCreate(args) {
        var _this = _super.call(this, args) || this;
        _this.description = "Create files for new Build Task";
        _this.serverCommand = false;
        return _this;
    }
    TaskCreate.prototype.getHelpArgs = function () {
        return ["taskName", "friendlyName", "description", "author"];
    };
    TaskCreate.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                trace.debug("build-create.exec");
                return [2 /*return*/, Promise.all([
                        this.commandArgs.taskName.val(),
                        this.commandArgs.friendlyName.val(),
                        this.commandArgs.description.val(),
                        this.commandArgs.author.val(),
                    ]).then(function (values) {
                        var taskName = values[0], friendlyName = values[1], description = values[2], author = values[3];
                        if (!taskName || !check.isAlphanumeric(taskName)) {
                            throw new Error("name is a required alphanumeric string with no spaces");
                        }
                        if (!friendlyName || !check.isLength(friendlyName, 1, 40)) {
                            throw new Error("friendlyName is a required string <= 40 chars");
                        }
                        if (!description || !check.isLength(description, 1, 80)) {
                            throw new Error("description is a required string <= 80 chars");
                        }
                        if (!author || !check.isLength(author, 1, 40)) {
                            throw new Error("author is a required string <= 40 chars");
                        }
                        var ret = {};
                        // create definition
                        trace.debug("creating folder for task");
                        var tp = path.join(process.cwd(), taskName);
                        trace.debug(tp);
                        shell.mkdir("-p", tp);
                        trace.debug("created folder");
                        ret.taskPath = tp;
                        trace.debug("creating definition");
                        var def = {};
                        def.id = uuid.v1();
                        trace.debug("id: " + def.id);
                        def.name = taskName;
                        trace.debug("name: " + def.name);
                        def.friendlyName = friendlyName;
                        trace.debug("friendlyName: " + def.friendlyName);
                        def.description = description;
                        trace.debug("description: " + def.description);
                        def.author = author;
                        trace.debug("author: " + def.author);
                        def.helpMarkDown = "Replace with markdown to show in help";
                        def.category = "Utility";
                        def.visibility = ["Build", "Release"];
                        def.demands = [];
                        def.version = { Major: "0", Minor: "1", Patch: "0" };
                        def.minimumAgentVersion = "1.95.0";
                        def.instanceNameFormat = taskName + " $(message)";
                        var cwdInput = {
                            name: "cwd",
                            type: "filePath",
                            label: "Working Directory",
                            defaultValue: "",
                            required: false,
                            helpMarkDown: "Current working directory when " + taskName + " is run.",
                        };
                        var msgInput = {
                            name: "msg",
                            type: "string",
                            label: "Message",
                            defaultValue: "Hello World",
                            required: true,
                            helpMarkDown: "Message to echo out",
                        };
                        def.inputs = [cwdInput, msgInput];
                        def.execution = {
                            Node: {
                                target: "sample.js",
                                argumentFormat: "",
                            },
                            PowerShell3: {
                                target: "sample.ps1",
                            },
                        };
                        ret.definition = def;
                        trace.debug("writing definition file");
                        var defPath = path.join(tp, "task.json");
                        trace.debug(defPath);
                        try {
                            var defStr = JSON.stringify(def, null, 2);
                            trace.debug(defStr);
                            fs.writeFileSync(defPath, defStr);
                        }
                        catch (err) {
                            throw new Error("Failed creating task: " + err.message);
                        }
                        trace.debug("created definition file.");
                        var copyResource = function (fileName) {
                            var src = path.join(__dirname, "_resources", fileName);
                            trace.debug("src: " + src);
                            var dest = path.join(tp, fileName);
                            trace.debug("dest: " + dest);
                            shell.cp(src, dest);
                            trace.debug(fileName + " copied");
                        };
                        trace.debug("creating temporary icon");
                        copyResource("icon.png");
                        copyResource("sample.js");
                        copyResource("sample.ps1");
                        return ret;
                    })];
            });
        });
    };
    TaskCreate.prototype.friendlyOutput = function (data) {
        if (!data) {
            throw new Error("no results");
        }
        trace.println();
        trace.success("created task @ %s", data.taskPath);
        var def = data.definition;
        trace.info("id   : %s", def.id);
        trace.info("name: %s", def.name);
        trace.println();
        trace.info("A temporary task icon was created.  Replace with a 32x32 png with transparencies");
    };
    return TaskCreate;
}(tasksBase.BuildTaskBase));
exports.TaskCreate = TaskCreate;
//# sourceMappingURL=create.js.map