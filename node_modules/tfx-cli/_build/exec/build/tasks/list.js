"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tasksBase = require("./default");
var trace = require("../../../lib/trace");
function getCommand(args) {
    return new BuildTaskList(args);
}
exports.getCommand = getCommand;
var BuildTaskList = /** @class */ (function (_super) {
    __extends(BuildTaskList, _super);
    function BuildTaskList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Get a list of build tasks";
        _this.serverCommand = true;
        return _this;
    }
    BuildTaskList.prototype.getHelpArgs = function () {
        return ["all"];
    };
    BuildTaskList.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var agentapi;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.webApi.getTaskAgentApi(this.connection.getCollectionUrl())];
                    case 1:
                        agentapi = _a.sent();
                        trace.debug("Searching for build tasks...");
                        return [2 /*return*/, agentapi.getTaskDefinitions(null, ["build"], null).then(function (tasks) {
                                trace.debug("Retrieved " + tasks.length + " build tasks from server.");
                                return _this.commandArgs.all.val().then(function (all) {
                                    if (all) {
                                        trace.debug("Listing all build tasks.");
                                        return tasks;
                                    }
                                    else {
                                        trace.debug("Filtering build tasks to give only the latest versions.");
                                        return _this._getNewestTasks(tasks);
                                    }
                                });
                            })];
                }
            });
        });
    };
    /*
     * takes a list of non-unique task definitions and returns only the newest unique definitions
     * TODO: move this code to the server, add a parameter to the controllers
     */
    BuildTaskList.prototype._getNewestTasks = function (allTasks) {
        var taskDictionary = {};
        for (var i = 0; i < allTasks.length; i++) {
            var currTask = allTasks[i];
            if (taskDictionary[currTask.id]) {
                var newVersion = new TaskVersion(currTask.version);
                var knownVersion = new TaskVersion(taskDictionary[currTask.id].version);
                trace.debug("Found additional version of " + currTask.name + " and comparing to the previously encountered version.");
                if (this._compareTaskVersion(newVersion, knownVersion) > 0) {
                    trace.debug("Found newer version of " +
                        currTask.name +
                        ".  Previous: " +
                        knownVersion.toString() +
                        "; New: " +
                        newVersion.toString());
                    taskDictionary[currTask.id] = currTask;
                }
            }
            else {
                trace.debug("Found task " + currTask.name);
                taskDictionary[currTask.id] = currTask;
            }
        }
        var newestTasks = [];
        for (var id in taskDictionary) {
            newestTasks.push(taskDictionary[id]);
        }
        return newestTasks;
    };
    /*
     * compares two versions of tasks, which are stored in version objects with fields 'major', 'minor', and 'patch'
     * @return positive value if version1 > version2, negative value if version2 > version1, 0 otherwise
     */
    BuildTaskList.prototype._compareTaskVersion = function (version1, version2) {
        if (version1.major != version2.major) {
            return version1.major - version2.major;
        }
        if (version1.minor != version2.minor) {
            return version1.minor - version2.minor;
        }
        if (version1.patch != version2.patch) {
            return version1.patch - version2.patch;
        }
        return 0;
    };
    BuildTaskList.prototype.friendlyOutput = function (data) {
        if (!data) {
            throw new Error("no tasks supplied");
        }
        if (!(data instanceof Array)) {
            throw new Error("expected an array of tasks");
        }
        data.forEach(function (task) {
            trace.println();
            trace.info("id            : %s", task.id);
            trace.info("name          : %s", task.name);
            trace.info("friendly name : %s", task.friendlyName);
            trace.info("visibility    : %s", task.visibility ? task.visibility.join(",") : "");
            trace.info("description   : %s", task.description);
            trace.info("version       : %s", new TaskVersion(task.version).toString());
        });
    };
    return BuildTaskList;
}(tasksBase.BuildTaskBase));
exports.BuildTaskList = BuildTaskList;
var TaskVersion = /** @class */ (function () {
    function TaskVersion(versionData) {
        this.major = versionData.major || 0;
        this.minor = versionData.minor || 0;
        this.patch = versionData.patch || 0;
    }
    TaskVersion.prototype.toString = function () {
        return this.major + "." + this.minor + "." + this.patch;
    };
    return TaskVersion;
}());
//# sourceMappingURL=list.js.map