"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var archiver = require("archiver");
var fs = require("fs");
var path = require("path");
var tasksBase = require("./default");
var trace = require("../../../lib/trace");
var vm = require("../../../lib/jsonvalidate");
var zip = require("jszip");
function getCommand(args) {
    return new BuildTaskUpload(args);
}
exports.getCommand = getCommand;
var c_taskJsonFile = "task.json";
var BuildTaskUpload = /** @class */ (function (_super) {
    __extends(BuildTaskUpload, _super);
    function BuildTaskUpload() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Upload a Build Task.";
        _this.serverCommand = true;
        return _this;
    }
    BuildTaskUpload.prototype.getHelpArgs = function () {
        return ["taskPath", "taskZipPath", "overwrite"];
    };
    BuildTaskUpload.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var taskPaths, taskZipPath, overwrite, taskStream, taskId, sourceLocation, data, z, fileContent, taskJson, taskPath, taskJsonPath, taskJson, archive, collectionUrl, agentApi;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.commandArgs.taskPath.val()];
                    case 1:
                        taskPaths = _a.sent();
                        return [4 /*yield*/, this.commandArgs.taskZipPath.val()];
                    case 2:
                        taskZipPath = _a.sent();
                        return [4 /*yield*/, this.commandArgs.overwrite.val()];
                    case 3:
                        overwrite = _a.sent();
                        taskStream = null;
                        taskId = null;
                        sourceLocation = null;
                        if (!taskZipPath && !taskPaths) {
                            throw new Error("You must specify either --task-path or --task-zip-path.");
                        }
                        if (!taskZipPath) return [3 /*break*/, 6];
                        data = fs.readFileSync(taskZipPath);
                        return [4 /*yield*/, zip.loadAsync(data)];
                    case 4:
                        z = _a.sent();
                        return [4 /*yield*/, z.files[c_taskJsonFile].async('text')];
                    case 5:
                        fileContent = _a.sent();
                        taskJson = JSON.parse(fileContent);
                        sourceLocation = taskZipPath;
                        taskId = taskJson.id;
                        taskStream = fs.createReadStream(taskZipPath);
                        return [3 /*break*/, 8];
                    case 6:
                        taskPath = taskPaths[0];
                        vm.exists(taskPath, "specified directory " + taskPath + " does not exist.");
                        taskJsonPath = path.join(taskPath, c_taskJsonFile);
                        return [4 /*yield*/, vm.validate(taskJsonPath, "no " + c_taskJsonFile + " in specified directory")];
                    case 7:
                        taskJson = _a.sent();
                        archive = archiver("zip");
                        archive.on("error", function (error) {
                            trace.debug("Archiving error: " + error.message);
                            error.message = "Archiving error: " + error.message;
                            throw error;
                        });
                        archive.directory(path.resolve(taskPath), false);
                        archive.finalize();
                        sourceLocation = taskPath;
                        taskId = taskJson.id;
                        taskStream = archive;
                        _a.label = 8;
                    case 8:
                        collectionUrl = this.connection.getCollectionUrl();
                        trace.info("Collection URL: " + collectionUrl);
                        return [4 /*yield*/, this.webApi.getTaskAgentApi(collectionUrl)];
                    case 9:
                        agentApi = _a.sent();
                        return [4 /*yield*/, agentApi.uploadTaskDefinition(null, taskStream, taskId, overwrite)];
                    case 10:
                        _a.sent();
                        trace.debug("Success");
                        return [2 /*return*/, { sourceLocation: sourceLocation, }];
                }
            });
        });
    };
    BuildTaskUpload.prototype.friendlyOutput = function (data) {
        trace.println();
        trace.success("Task at %s uploaded successfully!", data.sourceLocation);
    };
    return BuildTaskUpload;
}(tasksBase.BuildTaskBase));
exports.BuildTaskUpload = BuildTaskUpload;
//# sourceMappingURL=upload.js.map