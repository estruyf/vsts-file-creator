"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var colors = require("colors");
var errHandler = require("../../../lib/errorhandler");
var fs = require("fs");
var GalleryInterfaces = require("azure-devops-node-api/interfaces/GalleryInterfaces");
var trace = require("../../../lib/trace");
var xml2js = require("xml2js");
var zip = require("jszip");
var promiseUtils_1 = require("../../../lib/promiseUtils");
var GalleryBase = /** @class */ (function () {
    /**
     * Constructor
     * @param PublishSettings
     */
    function GalleryBase(settings, galleryClient, extInfo) {
        this.settings = settings;
        this.galleryClient = galleryClient;
        if (extInfo) {
            this.vsixInfoPromise = Promise.resolve(extInfo);
        }
        // if (!settings.galleryUrl || !/^https?:\/\//.test(settings.galleryUrl)) {
        //     throw "Invalid or missing gallery URL.";
        // }
        // if (!settings.token || !/^[A-z0-9]{52}$/.test(settings.token)) {
        //     throw "Invalid or missing personal access token.";
        // }
    }
    GalleryBase.prototype.getExtInfo = function () {
        if (!this.vsixInfoPromise) {
            this.vsixInfoPromise = GalleryBase.getExtInfo({
                extensionId: this.settings.extensionId,
                publisher: this.settings.publisher,
                vsixPath: this.settings.vsixPath,
            });
        }
        return this.vsixInfoPromise;
    };
    GalleryBase.getExtInfo = function (info) {
        var _this = this;
        var promise;
        if (info.extensionId && info.publisher) {
            promise = Promise.resolve({ id: info.extensionId, publisher: info.publisher, version: null });
        }
        else {
            promise = new Promise(function (resolve, reject) {
                fs.readFile(info.vsixPath, function (err, data) {
                    return __awaiter(this, void 0, void 0, function () {
                        var archive, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (err)
                                        reject(err);
                                    trace.debug("Read vsix as zip... Size (bytes): %s", data.length.toString());
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    archive = new zip();
                                    return [4 /*yield*/, archive.loadAsync(data)];
                                case 2:
                                    _a.sent();
                                    resolve(archive);
                                    return [3 /*break*/, 4];
                                case 3:
                                    err_1 = _a.sent();
                                    reject(err_1);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                });
            })
                .then(function (zip) {
                trace.debug("Files in the zip: %s", Object.keys(zip.files).join(", "));
                var vsixManifestFileNames = Object.keys(zip.files).filter(function (key) { return _.endsWith(key, "vsixmanifest"); });
                if (vsixManifestFileNames.length > 0) {
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _b = (_a = xml2js).parseString;
                                    return [4 /*yield*/, zip.files[vsixManifestFileNames[0]].async("text")];
                                case 1:
                                    _b.apply(_a, [_c.sent(), function (err, result) {
                                            if (err) {
                                                reject(err);
                                            }
                                            else {
                                                resolve(result);
                                            }
                                        }]);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                }
                else {
                    throw new Error("Could not locate vsix manifest!");
                }
            })
                .then(function (vsixManifestAsJson) {
                var extensionId = info.extensionId || _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Id");
                var extensionPublisher = info.publisher || _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Publisher");
                var extensionVersion = _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Version");
                var isPublicExtension = _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].GalleryFlags[0]", []).indexOf("Public") >= 0;
                if (extensionId && extensionPublisher) {
                    return {
                        id: extensionId,
                        publisher: extensionPublisher,
                        version: extensionVersion,
                        isPublicExtension: isPublicExtension,
                    };
                }
                else {
                    throw new Error("Could not locate both the extension id and publisher in vsix manfiest! Ensure your manifest includes both a namespace and a publisher property, or specify the necessary --publisher and/or --extension options.");
                }
            });
        }
        return promise;
    };
    GalleryBase.prototype.getValidationStatus = function (version) {
        var _this = this;
        return this.getExtInfo().then(function (extInfo) {
            return _this.galleryClient
                .getExtension(null, extInfo.publisher, extInfo.id, extInfo.version, GalleryInterfaces.ExtensionQueryFlags.IncludeVersions)
                .then(function (ext) {
                return _this.extToValidationStatus(ext, version);
            });
        });
    };
    GalleryBase.prototype.extToValidationStatus = function (extension, version) {
        if (!extension || extension.versions.length === 0) {
            throw new Error("Extension not published.");
        }
        var extVersion = extension.versions[0];
        if (version) {
            extVersion = this.getVersionedExtension(extension, version);
        }
        if (!extVersion) {
            throw new Error("Could not find extension version " + version);
        }
        // If there is a validationResultMessage, validation failed and this is the error
        // If the validated flag is missing and there is no validationResultMessage, validation is pending
        // If the validated flag is present and there is no validationResultMessage, the extension is validated.
        if (extVersion.validationResultMessage) {
            return extVersion.validationResultMessage;
        }
        else if ((extVersion.flags & GalleryInterfaces.ExtensionVersionFlags.Validated) === 0) {
            return PackagePublisher.validationPending;
        }
        else {
            return PackagePublisher.validated;
        }
    };
    GalleryBase.prototype.getVersionedExtension = function (extension, version) {
        var matches = extension.versions.filter(function (ev) { return ev.version === version; });
        if (matches.length > 0) {
            return matches[0];
        }
        else {
            return null;
        }
    };
    GalleryBase.prototype.getExtensionInfo = function () {
        var _this = this;
        return this.getExtInfo().then(function (extInfo) {
            return _this.galleryClient
                .getExtension(null, extInfo.publisher, extInfo.id, null, GalleryInterfaces.ExtensionQueryFlags.IncludeVersions |
                GalleryInterfaces.ExtensionQueryFlags.IncludeFiles |
                GalleryInterfaces.ExtensionQueryFlags.IncludeCategoryAndTags |
                GalleryInterfaces.ExtensionQueryFlags.IncludeSharedAccounts)
                .then(function (extension) {
                return extension;
            })
                .catch(errHandler.httpErr);
        });
    };
    GalleryBase.validationPending = "__validation_pending";
    GalleryBase.validated = "__validated";
    return GalleryBase;
}());
exports.GalleryBase = GalleryBase;
/**
 * Class that handles creating and deleting publishers
 */
var PublisherManager = /** @class */ (function (_super) {
    __extends(PublisherManager, _super);
    /**
     * Constructor
     * @param PublishSettings
     */
    function PublisherManager(settings, galleryClient) {
        var _this = _super.call(this, settings, galleryClient) || this;
        _this.settings = settings;
        _this.galleryClient = galleryClient;
        return _this;
    }
    /**
     * Create a a publisher with the given name, displayName, and description
     * @param string Publisher's unique name
     * @param string Publisher's display name
     * @param string Publisher description
     * @return Q.Promise that is resolved when publisher is created
     */
    PublisherManager.prototype.createPublisher = function (name, displayName, description) {
        return this.galleryClient
            .createPublisher({
            publisherName: name,
            displayName: displayName,
            longDescription: description,
            shortDescription: description,
        })
            .catch(errHandler.httpErr);
    };
    /**
     * Delete the publisher with the given name
     * @param string Publisher's unique name
     * @return Q.promise that is resolved when publisher is deleted
     */
    PublisherManager.prototype.deletePublisher = function (name) {
        return this.galleryClient.deletePublisher(name).catch(errHandler.httpErr);
    };
    return PublisherManager;
}(GalleryBase));
exports.PublisherManager = PublisherManager;
var SharingManager = /** @class */ (function (_super) {
    __extends(SharingManager, _super);
    function SharingManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SharingManager.prototype.shareWith = function (accounts) {
        var _this = this;
        return this.getExtInfo().then(function (extInfo) {
            return Promise.all(accounts.map(function (account) {
                trace.info("Sharing extension with %s.", account);
                return SharingManager.shareExtension(_this.galleryClient, extInfo.publisher, extInfo.id, account).catch(errHandler.httpErr);
                // return this.galleryClient.shareExtension(extInfo.publisher, extInfo.id, account).catch(errHandler.httpErr);
            }));
        });
    };
    SharingManager.prototype.unshareWith = function (accounts) {
        var _this = this;
        return this.getExtInfo().then(function (extInfo) {
            return Promise.all(accounts.map(function (account) {
                return _this.galleryClient.unshareExtension(extInfo.publisher, extInfo.id, account).catch(errHandler.httpErr);
            }));
        });
    };
    SharingManager.prototype.unshareWithAll = function () {
        var _this = this;
        return this.getSharedWithAccounts().then(function (accounts) {
            return _this.unshareWith(accounts);
        });
    };
    SharingManager.prototype.getSharedWithAccounts = function () {
        return this.getExtensionInfo().then(function (ext) {
            return ext.sharedWith.map(function (acct) { return acct.name; });
        });
    };
    /******** TEMPORARY UNTIL REST CLIENT UPDATED ********/
    SharingManager.shareExtension = function (client, publisherName, extensionName, accountName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var routeValues, verData, url, options, res, ret, err_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    routeValues = {
                                        publisherName: publisherName,
                                        extensionName: extensionName,
                                        accountName: accountName
                                    };
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, , 5]);
                                    return [4 /*yield*/, client.vsoClient.getVersioningData("6.1-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues)];
                                case 2:
                                    verData = _a.sent();
                                    url = verData.requestUrl;
                                    options = client.createRequestOptions('application/json', verData.apiVersion);
                                    return [4 /*yield*/, client.rest.create(url, null, options)];
                                case 3:
                                    res = _a.sent();
                                    ret = client.formatResponse(res.result, null, false);
                                    resolve(ret);
                                    return [3 /*break*/, 5];
                                case 4:
                                    err_2 = _a.sent();
                                    reject(err_2);
                                    return [3 /*break*/, 5];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    return SharingManager;
}(GalleryBase));
exports.SharingManager = SharingManager;
var PackagePublisher = /** @class */ (function (_super) {
    __extends(PackagePublisher, _super);
    function PackagePublisher() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PackagePublisher.prototype.checkVsixPublished = function () {
        var _this = this;
        return this.getExtInfo().then(function (extInfo) {
            return _this.galleryClient
                .getExtension(null, extInfo.publisher, extInfo.id)
                .then(function (ext) {
                if (ext) {
                    extInfo.published = true;
                    return extInfo;
                }
                return extInfo;
            })
                .catch(function () { return extInfo; });
        });
    };
    /**
     * Publish the VSIX extension given by vsixPath
     * @param string path to a VSIX extension to publish
     * @return Q.Promise that is resolved when publish is complete
     */
    PackagePublisher.prototype.publish = function () {
        var _this = this;
        var extPackage = {
            extensionManifest: fs.readFileSync(this.settings.vsixPath, "base64"),
        };
        trace.debug("Publishing %s", this.settings.vsixPath);
        // Check if the app is already published. If so, call the update endpoint. Otherwise, create.
        trace.info("Checking if this extension is already published");
        return this.getExtInfo().then(function (extInfo) {
            var quitValidation = _this.settings.noWaitValidation
                ? "You passed --no-wait-validation, so TFX is exiting."
                : "You can choose to exit (Ctrl-C) if you don't want to wait.";
            var noWaitHelp = _this.settings.noWaitValidation
                ? ""
                : "If you don't want TFX to wait for validation, use the --no-wait-validation parameter. ";
            var extensionValidationTime = extInfo.isPublicExtension
                ? "Based on the package size, this can take up to 20 mins."
                : "This should take only a few seconds, but in some cases may take a bit longer.";
            var validationMessage = "\n== Extension Validation In Progress ==\n" + extensionValidationTime + " " + quitValidation + " To get the validation status, you may run the command below. " + noWaitHelp + "This extension will be available after validation is successful.\n\n" + colors.yellow("tfx extension isvalid --publisher " + extInfo.publisher + " --extension-id " + extInfo.id + " --version " + extInfo.version + " --service-url " + _this.settings.galleryUrl + " --token <your PAT>");
            return _this.createOrUpdateExtension(extPackage).then(function (ext) {
                if (_this.settings.noWaitValidation) {
                    trace.info(validationMessage);
                    return ext;
                }
                else {
                    trace.info(validationMessage);
                    var versions = ext.versions;
                    versions.sort(function (a, b) { return b.lastUpdated.getTime() - a.lastUpdated.getTime(); });
                    var validationInterval = extInfo.isPublicExtension
                        ? PackagePublisher.fullValidationInterval
                        : PackagePublisher.fastValidationInterval;
                    var validationRetries = extInfo.isPublicExtension
                        ? PackagePublisher.fullValidationRetries
                        : PackagePublisher.fastValidationRetries;
                    var hangTightMessageRetryCount = extInfo.isPublicExtension ? -1 : 25;
                    return _this.waitForValidation(1000, validationInterval, validationRetries, hangTightMessageRetryCount, extInfo.publisher, extInfo.id, versions[0].version).then(function (result) {
                        if (result === PackagePublisher.validated) {
                            return ext;
                        }
                        else {
                            throw new Error("Extension validation failed. Please address the following issues and retry publishing.\n" +
                                result);
                        }
                    });
                }
            });
        });
    };
    PackagePublisher.prototype.createOrUpdateExtension = function (extPackage) {
        var _this = this;
        return this.checkVsixPublished().then(function (extInfo) {
            var publishPromise;
            if (extInfo && extInfo.published) {
                trace.info("It is, %s the extension", colors.cyan("update").toString());
                publishPromise = _this
                    .updateExtension(extPackage, extInfo.publisher, extInfo.id, false)
                    .catch(errHandler.httpErr);
            }
            else {
                trace.info("It isn't, %s a new extension.", colors.cyan("create").toString());
                publishPromise = _this.updateExtension(extPackage, extInfo.publisher, extInfo.id, true).catch(errHandler.httpErr);
            }
            return publishPromise.then(function () {
                return _this.galleryClient.getExtension(null, extInfo.publisher, extInfo.id, null, GalleryInterfaces.ExtensionQueryFlags.IncludeVersions);
            });
        });
    };
    /******** TEMPORARY UNTIL REST CLIENT UPDATED ********/
    PackagePublisher.prototype.updateExtension = function (content, publisherName, extensionName, create) {
        return __awaiter(this, void 0, void 0, function () {
            var routeValues, queryValues, verData, url, options, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        routeValues = {
                            publisherName: publisherName,
                            extensionName: extensionName
                        };
                        queryValues = {
                            bypassScopeCheck: undefined
                        };
                        return [4 /*yield*/, this.galleryClient.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues)];
                    case 1:
                        verData = _a.sent();
                        url = verData.requestUrl;
                        options = this.galleryClient.createRequestOptions("application/json", verData.apiVersion);
                        options.additionalHeaders = { "Content-Type": "application/json" };
                        return [4 /*yield*/, (create ? this.galleryClient.rest.create(url, content, options) : this.galleryClient.rest.replace(url, content, options))];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, this.galleryClient.formatResponse(response.result, GalleryInterfaces.TypeInfo.PublishedExtension, false)];
                }
            });
        });
    };
    /******** /TEMPORARY UNTIL REST CLIENT UPDATED ********/
    PackagePublisher.prototype.waitForValidation = function (interval, maxInterval, retries, showPatienceMessageAt, publisher, extensionId, version) {
        var _this = this;
        if (retries === 0) {
            var validationTimedOutMessage = "Validation is taking much longer than usual. TFX is exiting. To get the validation status, you may run the command below. This extension will be available after validation is successful.\n\n" + colors.yellow("tfx extension isvalid --publisher " + publisher + " --extension-id " + extensionId + " --version " + version + " --service-url " + this.settings.galleryUrl + " --token <your PAT>");
            throw new Error(validationTimedOutMessage);
        }
        else if (retries === showPatienceMessageAt) {
            trace.info("This is taking longer than usual. Hang tight...");
        }
        trace.debug("Polling for validation (%s retries remaining).", retries.toString());
        return promiseUtils_1.delay(this.getValidationStatus(version), interval).then(function (status) {
            trace.debug("--Retrieved validation status: %s", status);
            if (status === PackagePublisher.validationPending) {
                // exponentially increase interval until we reach max interval
                return _this.waitForValidation(Math.min(interval * 2, maxInterval), maxInterval, retries - 1, showPatienceMessageAt, publisher, extensionId, version);
            }
            else {
                return status;
            }
        });
    };
    PackagePublisher.fastValidationInterval = 2000;
    PackagePublisher.fastValidationRetries = 120;
    PackagePublisher.fullValidationInterval = 15000;
    PackagePublisher.fullValidationRetries = 80;
    return PackagePublisher;
}(GalleryBase));
exports.PackagePublisher = PackagePublisher;
//# sourceMappingURL=publish.js.map