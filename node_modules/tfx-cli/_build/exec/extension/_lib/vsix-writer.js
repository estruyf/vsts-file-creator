"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var vsix_manifest_builder_1 = require("./vsix-manifest-builder");
var utils_1 = require("./utils");
var loc_1 = require("./loc");
var _ = require("lodash");
var mkdirp = require("mkdirp");
var os = require("os");
var path = require("path");
var trace = require("../../../lib/trace");
var zip = require("jszip");
var promiseUtils_1 = require("../../../lib/promiseUtils");
var fs_1 = require("fs");
var util_1 = require("util");
var fsUtils_1 = require("../../../lib/fsUtils");
/**
 * Facilitates packaging the vsix and writing it to a file
 */
var VsixWriter = /** @class */ (function () {
    /**
     * constructor
     * @param any vsoManifest JS Object representing a vso manifest
     * @param any vsixManifest JS Object representing the XML for a vsix manifest
     */
    function VsixWriter(settings, components) {
        this.settings = settings;
        this.manifestBuilders = components.builders;
        this.resources = components.resources;
    }
    /**
     * If outPath is {auto}, generate an automatic file name.
     * Otherwise, try to determine if outPath is a directory (checking for a . in the filename)
     * If it is, generate an automatic filename in the given outpath
     * Otherwise, outPath doesn't change.
     * If filename is generated automatically, use fileExt as the extension
     */
    VsixWriter.prototype.getOutputPath = function (outPath, fileExt) {
        if (fileExt === void 0) { fileExt = "vsix"; }
        // Find the vsix manifest, if it exists
        var vsixBuilders = this.manifestBuilders.filter(function (b) { return b.getType() === vsix_manifest_builder_1.VsixManifestBuilder.manifestType; });
        var autoName = "extension." + fileExt;
        if (vsixBuilders.length === 1) {
            var vsixManifest = vsixBuilders[0].getData();
            var pub = _.get(vsixManifest, "PackageManifest.Metadata[0].Identity[0].$.Publisher");
            var ns = _.get(vsixManifest, "PackageManifest.Metadata[0].Identity[0].$.Id");
            var version = _.get(vsixManifest, "PackageManifest.Metadata[0].Identity[0].$.Version");
            autoName = pub + "." + ns + "-" + version + "." + fileExt;
        }
        if (outPath === "{auto}") {
            return path.resolve(autoName);
        }
        else {
            var basename = path.basename(outPath);
            if (basename.indexOf(".") > 0) {
                // conscious use of >
                return path.resolve(outPath);
            }
            else {
                return path.resolve(path.join(outPath, autoName));
            }
        }
    };
    VsixWriter.validatePartName = function (partName) {
        var segments = partName.split("/");
        if (segments.length === 1 && segments[0] === "[Content_Types].xml") {
            return true;
        }
        // matches most invalid segments.
        var re = /(%2f)|(%5c)|(^$)|(%[^0-9a-f])|(%.[^0-9a-f])|(\.$)|([^a-z0-9._~%!$&'()*+,;=:@-])/i;
        return segments.filter(function (segment) { return re.test(segment); }).length === 0;
    };
    VsixWriter.prototype.writeVsixMetadata = function () {
        return __awaiter(this, void 0, void 0, function () {
            var prevWrittenOutput, outputPath, _i, _a, builder, metadataResult, writePath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        prevWrittenOutput = null;
                        outputPath = this.settings.outputPath;
                        _i = 0, _a = this.manifestBuilders;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        builder = _a[_i];
                        metadataResult = builder.getMetadataResult(this.resources.combined);
                        if (!(typeof metadataResult === "string")) return [3 /*break*/, 3];
                        if (prevWrittenOutput === outputPath) {
                            trace.warn("Warning: Multiple files written to " +
                                outputPath +
                                ". Last writer will win. Instead, try providing a folder path in --output-path.");
                        }
                        writePath = path.join(outputPath, builder.getPath());
                        return [4 /*yield*/, util_1.promisify(fs_1.writeFile)(writePath, metadataResult, "utf8")];
                    case 2:
                        _b.sent();
                        prevWrittenOutput = outputPath;
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, outputPath];
                }
            });
        });
    };
    /**
     * Write a vsix package to the given file name
     */
    VsixWriter.prototype.writeVsix = function () {
        return __awaiter(this, void 0, void 0, function () {
            var outputPath_1, pathExists, _a, _i, _b, builder, _c, _d, filePath, fileObj, content, _e, writePath, folder, outputPath, vsix, builderPromises, seenPartNames;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!this.settings.metadataOnly) return [3 /*break*/, 15];
                        outputPath_1 = this.settings.outputPath;
                        return [4 /*yield*/, fsUtils_1.exists(outputPath_1)];
                    case 1:
                        pathExists = _f.sent();
                        _a = pathExists;
                        if (!_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, util_1.promisify(fs_1.lstat)(outputPath_1)];
                    case 2:
                        _a = !(_f.sent()).isDirectory();
                        _f.label = 3;
                    case 3:
                        if (_a) {
                            throw new Error("--output-path must be a directory when using --metadata-only.");
                        }
                        if (!!pathExists) return [3 /*break*/, 5];
                        return [4 /*yield*/, util_1.promisify(mkdirp)(outputPath_1, undefined)];
                    case 4:
                        _f.sent();
                        _f.label = 5;
                    case 5:
                        _i = 0, _b = this.manifestBuilders;
                        _f.label = 6;
                    case 6:
                        if (!(_i < _b.length)) return [3 /*break*/, 14];
                        builder = _b[_i];
                        _c = 0, _d = Object.keys(builder.files);
                        _f.label = 7;
                    case 7:
                        if (!(_c < _d.length)) return [3 /*break*/, 13];
                        filePath = _d[_c];
                        fileObj = builder.files[filePath];
                        if (!fileObj.isMetadata) return [3 /*break*/, 12];
                        _e = fileObj.content;
                        if (_e) return [3 /*break*/, 9];
                        return [4 /*yield*/, util_1.promisify(fs_1.readFile)(fileObj.path, "utf-8")];
                    case 8:
                        _e = (_f.sent());
                        _f.label = 9;
                    case 9:
                        content = _e;
                        writePath = path.join(this.settings.outputPath, fileObj.partName);
                        folder = path.dirname(writePath);
                        return [4 /*yield*/, util_1.promisify(mkdirp)(folder, undefined)];
                    case 10:
                        _f.sent();
                        return [4 /*yield*/, util_1.promisify(fs_1.writeFile)(writePath, content, "utf-8")];
                    case 11:
                        _f.sent();
                        _f.label = 12;
                    case 12:
                        _c++;
                        return [3 /*break*/, 7];
                    case 13:
                        _i++;
                        return [3 /*break*/, 6];
                    case 14: return [2 /*return*/, this.writeVsixMetadata()];
                    case 15:
                        outputPath = this.getOutputPath(this.settings.outputPath);
                        vsix = new zip();
                        builderPromises = [];
                        seenPartNames = new Set();
                        this.manifestBuilders.forEach(function (builder) {
                            // Avoid the error EMFILE: too many open files
                            var addPackageFilesBatch = function (paths, numBatch, batchSize, deferred) {
                                deferred = deferred || promiseUtils_1.defer();
                                var readFilePromises = [];
                                var start = numBatch * batchSize;
                                var end = Math.min(paths.length, start + batchSize);
                                var _loop_1 = function (i) {
                                    var path_1 = paths[i];
                                    var itemName = utils_1.toZipItemName(builder.files[path_1].partName);
                                    if (!VsixWriter.validatePartName(itemName)) {
                                        var eol = require("os").EOL;
                                        throw new Error("Part Name '" +
                                            itemName +
                                            "' is invalid. Please check the following: " +
                                            eol +
                                            "1. No whitespace or any of these characters: #^[]<>?" +
                                            eol +
                                            "2. Cannot end with a period." +
                                            eol +
                                            "3. No percent-encoded / or \\ characters. Additionally, % must be followed by two hex characters.");
                                    }
                                    if (itemName.indexOf(" "))
                                        if (!builder.files[path_1].content) {
                                            var readFilePromise = util_1.promisify(fs_1.readFile)(path_1).then(function (result) {
                                                if (!seenPartNames.has(itemName)) {
                                                    vsix.file(itemName, result);
                                                    seenPartNames.add(itemName);
                                                }
                                                if (builder.files[path_1]._additionalPackagePaths) {
                                                    for (var _i = 0, _a = builder.files[path_1]._additionalPackagePaths; _i < _a.length; _i++) {
                                                        var p = _a[_i];
                                                        var additionalItemName = utils_1.toZipItemName(p);
                                                        if (!seenPartNames.has(additionalItemName)) {
                                                            vsix.file(additionalItemName, result);
                                                            seenPartNames.add(additionalItemName);
                                                        }
                                                    }
                                                }
                                            });
                                            readFilePromises.push(readFilePromise);
                                        }
                                        else {
                                            if (!seenPartNames.has(itemName)) {
                                                vsix.file(itemName, builder.files[path_1].content);
                                                seenPartNames.add(itemName);
                                            }
                                            if (builder.files[path_1]._additionalPackagePaths) {
                                                for (var _i = 0, _a = builder.files[path_1]._additionalPackagePaths; _i < _a.length; _i++) {
                                                    var p = _a[_i];
                                                    var additionalItemName = utils_1.toZipItemName(p);
                                                    if (!seenPartNames.has(additionalItemName)) {
                                                        vsix.file(additionalItemName, builder.files[path_1].content);
                                                        seenPartNames.add(additionalItemName);
                                                    }
                                                }
                                            }
                                            readFilePromises.push(Promise.resolve(null));
                                        }
                                };
                                for (var i = start; i < end; i++) {
                                    _loop_1(i);
                                }
                                Promise.all(readFilePromises)
                                    .then(function () {
                                    if (end < paths.length) {
                                        // Next batch
                                        addPackageFilesBatch(paths, numBatch + 1, batchSize, deferred);
                                    }
                                    else {
                                        deferred.resolve(null);
                                    }
                                })
                                    .catch(function (err) {
                                    deferred.reject(err);
                                });
                                return deferred.promise;
                            };
                            // Add the package files in batches
                            var builderPromise = addPackageFilesBatch(Object.keys(builder.files), 0, VsixWriter.VSIX_ADD_FILES_BATCH_SIZE).then(function () {
                                // Add the manifest itself
                                vsix.file(utils_1.toZipItemName(builder.getPath()), builder.getResult(_this.resources.combined));
                            });
                            builderPromises.push(builderPromise);
                        });
                        return [2 /*return*/, Promise.all(builderPromises).then(function () {
                                trace.debug("Writing vsix to: %s", outputPath);
                                return new Promise(function (resolve, reject) {
                                    mkdirp(path.dirname(outputPath), function (err, made) {
                                        if (err) {
                                            reject(err);
                                        }
                                        else {
                                            resolve(made);
                                        }
                                    });
                                }).then(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var buffer;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, vsix.generateAsync({
                                                    type: "nodebuffer",
                                                    compression: "DEFLATE",
                                                })];
                                            case 1:
                                                buffer = _a.sent();
                                                return [2 /*return*/, util_1.promisify(fs_1.writeFile)(outputPath, buffer).then(function () { return outputPath; })];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    };
    /**
     * For each folder F under the localization folder (--loc-root),
     * look for a resources.resjson file within F. If it exists, split the
     * resources.resjson into one file per manifest. Add
     * each to the vsix archive as F/<manifest_loc_path> and F/Extension.vsixlangpack
     */
    VsixWriter.prototype.addResourceStrings = function (vsix) {
        var _this = this;
        // Make sure locRoot is set, that it refers to a directory, and
        // iterate each subdirectory of that.
        if (!this.settings.locRoot) {
            return Promise.resolve(null);
        }
        var stringsPath = path.resolve(this.settings.locRoot);
        // Check that --loc-root exists and is a directory.
        return fsUtils_1.exists(stringsPath)
            .then(function (exists) {
            if (exists) {
                return util_1.promisify(fs_1.lstat)(stringsPath).then(function (stats) {
                    if (stats.isDirectory()) {
                        return true;
                    }
                });
            }
            else {
                return false;
            }
        })
            .then(function (stringsFolderExists) {
            if (!stringsFolderExists) {
                return Promise.resolve(null);
            }
            // stringsPath exists and is a directory - read it.
            return util_1.promisify(fs_1.readdir)(stringsPath).then(function (files) {
                var promises = [];
                files.forEach(function (languageTag) {
                    var filePath = path.join(stringsPath, languageTag);
                    var promise = util_1.promisify(fs_1.lstat)(filePath).then(function (fileStats) {
                        if (fileStats.isDirectory()) {
                            // We're under a language tag directory within locRoot. Look for
                            // resources.resjson and use that to generate manfiest files
                            var resourcePath_1 = path.join(filePath, "resources.resjson");
                            fsUtils_1.exists(resourcePath_1).then(function (exists) {
                                if (exists) {
                                    // A resources.resjson file exists in <locRoot>/<language_tag>/
                                    return util_1.promisify(fs_1.readFile)(resourcePath_1, "utf8").then(function (contents) {
                                        var resourcesObj = JSON.parse(contents);
                                        // For each language, go through each builder and generate its
                                        // localized resources.
                                        _this.manifestBuilders.forEach(function (builder) {
                                            var locFiles = builder.getLocResult(resourcesObj, null);
                                            locFiles.forEach(function (locFile) { });
                                        });
                                        var locGen = new loc_1.LocPrep.LocKeyGenerator(null);
                                        // let splitRes = locGen.splitIntoVsoAndVsixResourceObjs(resourcesObj);
                                        // let locManifestPath = languageTag + "/" + VsixWriter.VSO_MANIFEST_FILENAME;
                                        // vsix.file(toZipItemName(locManifestPath), this.getVsoManifestString(splitRes.vsoResources));
                                        // this.vsixManifest.PackageManifest.Assets[0].Asset.push({
                                        // 	"$": {
                                        // 		Lang: languageTag,
                                        // 		Type: "Microsoft.VisualStudio.Services.Manifest",
                                        // 		Path: locManifestPath,
                                        // 		Addressable: "true",
                                        // 		"d:Source": "File"
                                        // 	}
                                        // });
                                        // let builder = new xml.Builder(VsixWriter.DEFAULT_XML_BUILDER_SETTINGS);
                                        // let vsixLangPackStr = builder.buildObject(splitRes.vsixResources);
                                        // vsix.file(toZipItemName(languageTag + "/Extension.vsixlangpack"), vsixLangPackStr);
                                    });
                                }
                                else {
                                    return Promise.resolve(null);
                                }
                            });
                        }
                    });
                    promises.push(promise);
                });
                return Promise.all(promises);
            });
        });
    };
    VsixWriter.VSIX_ADD_FILES_BATCH_SIZE = 20;
    VsixWriter.VSO_MANIFEST_FILENAME = "extension.vsomanifest";
    VsixWriter.VSIX_MANIFEST_FILENAME = "extension.vsixmanifest";
    VsixWriter.CONTENT_TYPES_FILENAME = "[Content_Types].xml";
    VsixWriter.DEFAULT_XML_BUILDER_SETTINGS = {
        indent: "    ",
        newline: os.EOL,
        pretty: true,
        xmldec: {
            encoding: "utf-8",
            standalone: null,
            version: "1.0",
        },
    };
    return VsixWriter;
}());
exports.VsixWriter = VsixWriter;
//# sourceMappingURL=vsix-writer.js.map