"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfcommand_1 = require("../../lib/tfcommand");
var publish_1 = require("./_lib/publish");
var path = require("path");
var _ = require("lodash");
var jju = require("jju");
var args = require("../../lib/arguments");
var https = require("https");
var trace = require("../../lib/trace");
var fs_1 = require("fs");
var util_1 = require("util");
var GalleryApi_1 = require("azure-devops-node-api/GalleryApi");
function getCommand(args) {
    return new ExtensionBase(args);
}
exports.getCommand = getCommand;
var ManifestJsonArgument = /** @class */ (function (_super) {
    __extends(ManifestJsonArgument, _super);
    function ManifestJsonArgument() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ManifestJsonArgument;
}(args.JsonArgument));
exports.ManifestJsonArgument = ManifestJsonArgument;
var ExtensionBase = /** @class */ (function (_super) {
    __extends(ExtensionBase, _super);
    function ExtensionBase(passedArgs) {
        var _this = _super.call(this, passedArgs) || this;
        _this.description = "Commands to package, publish, and manage Extensions for Azure DevOps Services.";
        _this.serverCommand = false;
        return _this;
    }
    ExtensionBase.prototype.getHelpArgs = function () {
        return [];
    };
    ExtensionBase.prototype.setCommandArgs = function () {
        _super.prototype.setCommandArgs.call(this);
        this.registerCommandArgument("extensionId", "Extension ID", "Use this as the extension ID instead of what is specified in the manifest.", args.StringArgument);
        this.registerCommandArgument("publisher", "Publisher name", "Use this as the publisher ID instead of what is specified in the manifest.", args.StringArgument);
        this.registerCommandArgument("manifests", "Manifests", "List of individual manifest files (space separated).", args.ArrayArgument, "vss-extension.json");
        this.registerCommandArgument("manifestGlobs", "Manifest globs", "List of globs to find manifests (space separated).", args.ArrayArgument, null);
        this.registerCommandArgument("json5", "Extended JSON", "Support extended JSON (aka JSON 5) for comments, unquoted strings, dangling commas, etc.", args.BooleanArgument, "false");
        this.registerCommandArgument("outputPath", "Output path", "Path to write the VSIX.", args.StringArgument, "{auto}");
        this.registerCommandArgument("override", "Overrides JSON", "JSON string which is merged into the manifests, overriding any values.", ManifestJsonArgument, "{}");
        this.registerCommandArgument("overridesFile", "Overrides JSON file", "Path to a JSON file with overrides. This partial manifest will always take precedence over any values in the manifests.", args.ReadableFilePathsArgument, null);
        this.registerCommandArgument("shareWith", "Share with", "List of Azure DevOps organization(s) with which to share the extension (space separated).", args.ArrayArgument, null);
        this.registerCommandArgument("unshareWith", "Un-share with", "List of Azure DevOps organization(s) with which to un-share the extension (space separated).", args.ArrayArgument, null);
        this.registerCommandArgument("vsix", "VSIX path", "Path to an existing VSIX (to publish or query for).", args.ReadableFilePathsArgument);
        this.registerCommandArgument("bypassValidation", "Bypass local validation", null, args.BooleanArgument, "false");
        this.registerCommandArgument("locRoot", "Localization root", "Root of localization hierarchy (see README for more info).", args.ExistingDirectoriesArgument, null);
        this.registerCommandArgument("displayName", "Display name", null, args.StringArgument);
        this.registerCommandArgument("description", "Description", "Description of the Publisher.", args.StringArgument);
        this.registerCommandArgument("revVersion", "Rev version", "Rev the patch-version of the extension and save the result.", args.BooleanArgument, "false");
        this.registerCommandArgument("noWaitValidation", "Wait for validation?", "Don't block command for extension validation.", args.BooleanArgument, "false");
        this.registerCommandArgument("metadataOnly", "Metadata only", "Only copy metadata to the path specified and do not package the extension", args.BooleanArgument, "false", true);
    };
    ExtensionBase.prototype.getMergeSettings = function () {
        return Promise.all([
            this.commandArgs.root.val(),
            this.commandArgs.locRoot.val(),
            this.commandArgs.manifests.val(),
            this.commandArgs.manifestGlobs.val(),
            this.commandArgs.override.val(),
            this.commandArgs.overridesFile.val(),
            this.commandArgs.revVersion.val(),
            this.commandArgs.bypassValidation.val(),
            this.commandArgs.publisher.val(true),
            this.commandArgs.extensionId.val(true),
            this.commandArgs.json5.val(true),
        ]).then(function (values) {
            var root = values[0], locRoot = values[1], manifests = values[2], manifestGlob = values[3], override = values[4], overridesFile = values[5], revVersion = values[6], bypassValidation = values[7], publisher = values[8], extensionId = values[9], json5 = values[10];
            if (publisher) {
                _.set(override, "publisher", publisher);
            }
            if (extensionId) {
                _.set(override, "extensionid", extensionId);
            }
            var overrideFileContent = Promise.resolve("");
            if (overridesFile && overridesFile.length > 0) {
                overrideFileContent = util_1.promisify(fs_1.readFile)(overridesFile[0], "utf8");
            }
            return overrideFileContent.then(function (contentStr) {
                var content = contentStr;
                if (content === "") {
                    content = "{}";
                    if (overridesFile && overridesFile.length > 0) {
                        trace.warn("Overrides file was empty. No overrides will be imported from " + overridesFile[0]);
                    }
                }
                var mergedOverrides = {};
                var contentJSON = {};
                try {
                    contentJSON = json5 ? jju.parse(content) : JSON.parse(content);
                }
                catch (e) {
                    throw new Error("Could not parse contents of " + overridesFile[0] + " as JSON. \n");
                }
                contentJSON["__origin"] = overridesFile ? overridesFile[0] : path.join(root[0], "_override.json");
                _.merge(mergedOverrides, contentJSON, override);
                return {
                    root: root[0],
                    locRoot: locRoot && locRoot[0],
                    manifests: manifests,
                    manifestGlobs: manifestGlob,
                    overrides: mergedOverrides,
                    bypassValidation: bypassValidation,
                    revVersion: revVersion,
                    json5: json5,
                };
            });
        });
    };
    ExtensionBase.prototype.getPackageSettings = function () {
        return Promise.all([
            this.commandArgs.outputPath.val(),
            this.commandArgs.locRoot.val(),
            this.commandArgs.metadataOnly.val(),
        ]).then(function (values) {
            var outputPath = values[0], locRoot = values[1], metadataOnly = values[2];
            return {
                outputPath: outputPath,
                locRoot: locRoot && locRoot[0],
                metadataOnly: metadataOnly,
            };
        });
    };
    ExtensionBase.prototype.identifyExtension = function () {
        var _this = this;
        return this.commandArgs.vsix.val(true).then(function (result) {
            var vsixPath = _.isArray(result) ? result[0] : null;
            var infoPromise;
            if (!vsixPath) {
                infoPromise = Promise.all([_this.commandArgs.publisher.val(), _this.commandArgs.extensionId.val()]).then(function (values) {
                    var publisher = values[0], extensionId = values[1];
                    return publish_1.GalleryBase.getExtInfo({ extensionId: extensionId, publisher: publisher });
                });
            }
            else {
                infoPromise = Promise.all([_this.commandArgs.publisher.val(true), _this.commandArgs.extensionId.val(true)]).then(function (values) {
                    var publisher = values[0], extensionId = values[1];
                    return publish_1.GalleryBase.getExtInfo({ vsixPath: vsixPath, publisher: publisher, extensionId: extensionId });
                });
            }
            return infoPromise;
        });
    };
    ExtensionBase.prototype.getPublishSettings = function () {
        return Promise.all([
            this.commandArgs.serviceUrl.val(),
            this.commandArgs.vsix.val(true),
            this.commandArgs.publisher.val(true),
            this.commandArgs.extensionId.val(true),
            this.commandArgs.shareWith.val(),
            this.commandArgs.noWaitValidation.val(),
        ]).then(function (values) {
            var marketUrl = values[0], vsix = values[1], publisher = values[2], extensionId = values[3], shareWith = values[4], noWaitValidation = values[5];
            var vsixPath = _.isArray(vsix) ? vsix[0] : null;
            return {
                galleryUrl: marketUrl,
                vsixPath: vsixPath,
                publisher: publisher,
                extensionId: extensionId,
                shareWith: shareWith,
                noWaitValidation: noWaitValidation,
            };
        });
    };
    ExtensionBase.prototype.exec = function (cmd) {
        return this.getHelp(cmd);
    };
    /**** TEMPORARY until Marketplace fixes getResourceArea ****/
    ExtensionBase.prototype.getGalleryApi = function () {
        return __awaiter(this, void 0, void 0, function () {
            var handler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCredentials(this.webApi.serverUrl, false)];
                    case 1:
                        handler = _a.sent();
                        return [2 /*return*/, new GalleryApi_1.GalleryApi(this.webApi.serverUrl, [handler])]; // await this.webApi.getGalleryApi(this.webApi.serverUrl);
                }
            });
        });
    };
    /**** TEMPORARY until Marketplace fixes getResourceArea ****/
    ExtensionBase.getMarketplaceUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, resourceArea;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trace.debug("getMarketplaceUrl");
                        url = "https://app.vssps.visualstudio.com/_apis/resourceareas/69D21C00-F135-441B-B5CE-3626378E0819";
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                https
                                    .get(url, function (resp) {
                                    var data = "";
                                    resp.on("data", function (chunk) {
                                        data += chunk;
                                    });
                                    resp.on("end", function () {
                                        resolve(data);
                                    });
                                })
                                    .on("error", function (err) {
                                    reject(err);
                                });
                            })];
                    case 1:
                        response = _a.sent();
                        resourceArea = JSON.parse(response);
                        return [2 /*return*/, [resourceArea["locationUrl"]]];
                }
            });
        });
    };
    return ExtensionBase;
}(tfcommand_1.TfCommand));
exports.ExtensionBase = ExtensionBase;
//# sourceMappingURL=default.js.map