"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfcommand_1 = require("../lib/tfcommand");
var diskcache_1 = require("../lib/diskcache");
var credstore_1 = require("../lib/credstore");
var colors = require("colors");
var os = require("os");
var trace = require("../lib/trace");
function getCommand(args) {
    // this just offers description for help and to offer sub commands
    return new Login(args);
}
exports.getCommand = getCommand;
/**
 * Facilitates a "log in" to a service by caching credentials.
 */
var Login = /** @class */ (function (_super) {
    __extends(Login, _super);
    function Login() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Login and cache credentials using a PAT or basic auth.";
        _this.serverCommand = true;
        return _this;
    }
    Login.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                trace.debug("Login.exec");
                return [2 /*return*/, this.commandArgs.serviceUrl.val().then(function (collectionUrl) { return __awaiter(_this, void 0, void 0, function () {
                        var authHandler, webApi, locationsApi, connectionData, tfxCredStore, tfxCache, credString, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getCredentials(collectionUrl, false)];
                                case 1:
                                    authHandler = _a.sent();
                                    return [4 /*yield*/, this.getWebApi()];
                                case 2:
                                    webApi = _a.sent();
                                    return [4 /*yield*/, webApi.getLocationsApi()];
                                case 3:
                                    locationsApi = _a.sent();
                                    _a.label = 4;
                                case 4:
                                    _a.trys.push([4, 8, , 9]);
                                    return [4 /*yield*/, locationsApi.getConnectionData()];
                                case 5:
                                    connectionData = _a.sent();
                                    tfxCredStore = credstore_1.getCredentialStore("tfx");
                                    tfxCache = new diskcache_1.DiskCache("tfx");
                                    credString = void 0;
                                    if (authHandler.username === "OAuth") {
                                        credString = "pat:" + authHandler.password;
                                    }
                                    else {
                                        credString = "basic:" + authHandler.username + ":" + authHandler.password;
                                    }
                                    return [4 /*yield*/, tfxCredStore.storeCredential(collectionUrl, "allusers", credString)];
                                case 6:
                                    _a.sent();
                                    return [4 /*yield*/, tfxCache.setItem("cache", "connection", collectionUrl)];
                                case 7:
                                    _a.sent();
                                    return [2 /*return*/, { success: true }];
                                case 8:
                                    err_1 = _a.sent();
                                    if (err_1 && err_1.statusCode && err_1.statusCode === 401) {
                                        trace.debug("Connection failed: invalid credentials.");
                                        throw new Error("Invalid credentials. " + err_1.message);
                                    }
                                    else if (err_1) {
                                        trace.debug("Connection failed.");
                                        throw new Error("Connection failed. Check your internet connection & collection URL." +
                                            os.EOL +
                                            "Message: " +
                                            err_1.message);
                                    }
                                    else {
                                        throw new Error("Unknown error logging in.");
                                    }
                                    return [3 /*break*/, 9];
                                case 9: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    Login.prototype.friendlyOutput = function (data) {
        if (data.success) {
            trace.info(colors.green("Logged in successfully"));
        }
        else {
            trace.error("login unsuccessful.");
        }
    };
    return Login;
}(tfcommand_1.TfCommand));
exports.Login = Login;
//# sourceMappingURL=login.js.map