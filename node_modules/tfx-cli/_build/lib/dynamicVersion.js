"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DynamicVersion = /** @class */ (function () {
    function DynamicVersion() {
        var numbers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            numbers[_i] = arguments[_i];
        }
        if (numbers.some(function (n) { return n < 0; })) {
            throw new Error("Version numbers must be non-negative.");
        }
        if (numbers.every(function (n) { return n === 0; })) {
            throw new Error("Version must be greater than 0.0.0");
        }
        this.numbers = numbers;
    }
    /**
     * Parse a DynamicVersion from a string.
     */
    DynamicVersion.parse = function (version) {
        try {
            var splitVersion = version.split(".").map(function (v) { return parseInt(v); });
            if (!splitVersion.some(function (e) { return isNaN(e); })) {
                return new (DynamicVersion.bind.apply(DynamicVersion, [void 0].concat(splitVersion)))();
            }
            else {
                throw "";
            }
        }
        catch (e) {
            throw new Error("Could not parse '" + version + "' as a Semantic Version.");
        }
    };
    /**
     * Increase the last number of a dynamic version and returns the new version.
     */
    DynamicVersion.increase = function (version) {
        var newVersion = version.numbers;
        newVersion[newVersion.length - 1] = newVersion[newVersion.length - 1] + 1;
        return new (DynamicVersion.bind.apply(DynamicVersion, [void 0].concat(newVersion)))();
    };
    /**
     * Return a string-representation of this dynamic version, e.g. 2.10.5.42
     */
    DynamicVersion.prototype.toString = function () {
        return this.numbers.join(".");
    };
    /**
     * Return < 0 if this version is less than other,
     * > 0 if this version is greater than other,
     * and 0 if they are equal.
     *
     * If this version length is less than than other
     * this version is less than other.
     */
    DynamicVersion.prototype.compareTo = function (other) {
        // [2,0,7] --- [2,0,7,1]
        for (var i = 0; i < Math.min(this.numbers.length, other.numbers.length); ++i) {
            var thisV = this.numbers[i];
            var otherV = other.numbers[i];
            if (thisV !== otherV) {
                return thisV - otherV;
            }
        }
        return this.numbers.length - other.numbers.length;
    };
    return DynamicVersion;
}());
exports.DynamicVersion = DynamicVersion;
//# sourceMappingURL=dynamicVersion.js.map