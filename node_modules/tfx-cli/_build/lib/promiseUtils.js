"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
function timeout(promise, timeoutMs, message) {
    return new Promise(function (resolve, reject) {
        var timeoutHandle = setTimeout(function () {
            reject(message == null ? "Timed out after " + timeoutMs + " ms." : message);
        }, timeoutMs);
        // Maybe use finally when it's available.
        promise.then(function (result) {
            resolve(result);
            clearTimeout(timeoutHandle);
        }, function (reason) {
            reject(reason);
            clearTimeout(timeoutHandle);
        });
    });
}
exports.timeout = timeout;
function defer() {
    var resolve;
    var reject;
    var promise = new Promise(function (resolver, rejecter) {
        resolve = resolver;
        reject = rejecter;
    });
    return {
        resolve: resolve,
        reject: reject,
        promise: promise,
    };
}
exports.defer = defer;
function wait(timeoutMs) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) {
                    setTimeout(resolve, timeoutMs);
                })];
        });
    });
}
exports.wait = wait;
// Return a promise that resolves at least delayMs from now. Rejection happens immediately.
function delay(promise, delayMs) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([promise, wait(delayMs)])];
                case 1: return [2 /*return*/, (_a.sent())[0]];
            }
        });
    });
}
exports.delay = delay;
function allSettled(promises) {
    var results = new Array(promises.length);
    return new Promise(function (resolve) {
        var count = 0;
        var _loop_1 = function (i) {
            var promise = promises[i];
            promise
                .then(function (result) {
                results[i] = {
                    state: "fulfilled",
                    value: result,
                };
            }, function (reason) {
                results[i] = {
                    state: "rejected",
                    reason: reason,
                };
            })
                .then(function () {
                if (++count === promises.length) {
                    resolve(results);
                }
            });
        };
        for (var i = 0; i < promises.length; ++i) {
            _loop_1(i);
        }
    });
}
exports.allSettled = allSettled;
function realPromise(promise) {
    return new Promise(function (resolve, reject) {
        promise.then(resolve, reject);
    });
}
exports.realPromise = realPromise;
//# sourceMappingURL=promiseUtils.js.map