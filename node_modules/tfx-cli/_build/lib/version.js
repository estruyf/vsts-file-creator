"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("./common");
var path = require("path");
var dynamicVersion_1 = require("./dynamicVersion");
var SemanticVersion = /** @class */ (function (_super) {
    __extends(SemanticVersion, _super);
    function SemanticVersion(major, minor, patch) {
        var _this = _super.call(this, major, minor, patch) || this;
        _this.major = major;
        _this.minor = minor;
        _this.patch = patch;
        return _this;
    }
    /**
     * Parse a Semantic Version from a string.
     */
    SemanticVersion.parse = function (version) {
        try {
            var spl = version.split(".").map(function (v) { return parseInt(v); });
            if (spl.length === 3 && !spl.some(function (e) { return isNaN(e); })) {
                return new SemanticVersion(spl[0], spl[1], spl[2]);
            }
            else {
                throw "";
            }
        }
        catch (e) {
            throw new Error("Could not parse '" + version + "' as a Semantic Version.");
        }
    };
    return SemanticVersion;
}(dynamicVersion_1.DynamicVersion));
exports.SemanticVersion = SemanticVersion;
function getTfxVersion() {
    var packageJson = require(path.join(common.APP_ROOT, "package.json"));
    return Promise.resolve(SemanticVersion.parse(packageJson.version));
}
exports.getTfxVersion = getTfxVersion;
//# sourceMappingURL=version.js.map